import numpy as np

labels = np.array(['germinoma', 'pineocytoma', 'pineoblastoma',
       'Pineal Parenchymal Tumor of Intermediate Differentiation',
       'papillary tumor of the pineal region', 'meningioma',
       'arachnoid  cyst', 'epidermoid cyst', 'dermoid cyst', 'lipoma',
       'Racemose neurocysticercosis (NCC)', 'metastasis ',
       'brainstem tectal glioma', 'teratoma',
       'Nongerminomatous GCTs / Embryonal carcinoma',
       'pineal cyst', 'Rosette-Forming Glioneuronal Tumor',
       'AT/RTs (atypical  teratoid-rhabdoid tumor)'], dtype=object)

all_features = np.array(['old', 'young', 'Solid', 'cystic', 'cystic2cm', 'Engulfing', 
     'exploding', 'Diffusion', 'calcif', 'fat', 'Hemorrhage', 
     'Hyperintese', 'tectum', 'dural', 'grape'], dtype=object)

prevalence = np.array([0.09230769, 0.06153846, 0.06153846, 0.05384615, 0.05384615,
       0.07692308, 0.05384615, 0.06153846, 0.04615385, 0.04615385,
       0.03846154, 0.06153846, 0.06153846, 0.05384615, 0.04615385,
       0.04615385, 0.03846154, 0.04615385])

positive = np.array([[0.91  , 0.36  , 0.76  , 0.085 , 0.46  , 0.085 , 0.16  , 0.11  ,
        0.21  , 0.11  , 0.16  , 0.085 , 0.96  , 0.96  , 1.01  , 0.31  ,
        0.01  , 0.96  ],
       [0.16  , 0.71  , 0.26  , 0.96  , 0.55  , 0.96  , 0.91  , 0.96  ,
        0.86  , 0.86  , 0.96  , 0.985 , 0.085 , 0.085 , 0.06  , 0.81  ,
        1.01  , 0.085 ],
       [0.96  , 0.66  , 0.96  , 0.81  , 1.01  , 1.01  , 0.01  , 0.01  ,
        0.01  , 1.01  , 0.01  , 1.01  , 1.01  , 1.01  , 1.01  , 0.01  ,
        0.76  , 1.01  ],
       [0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 1.01  , 1.01  ,
        1.01  , 0.01  , 1.01  , 0.01  , 0.01  , 0.01  , 0.01  , 1.01  ,
        0.01  , 0.01  ],
       [0.01  , 0.56  , 0.16  , 0.31  , 0.085 , 0.01  , 0.01  , 0.01  ,
        0.01  , 0.01  , 0.01  , 0.11  , 0.01  , 0.035 , 0.16  , 0.035 ,
        0.21  , 0.085 ],
       [1.01  , 0.01  , 0.01  , 0.01  , 0.085 , 0.01  , 0.01  , 0.01  ,
        0.01  , 0.01  , 0.01  , 0.11  , 0.01  , 0.01  , 0.01  , 0.06  ,
        0.06  , 0.01  ],
       [0.01  , 1.01  , 0.96  , 0.81  , 0.085 , 1.01  , 0.085 , 0.035 ,
        0.01  , 0.035 , 0.06  , 0.56  , 0.16  , 0.96  , 0.91  , 0.06  ,
        0.11  , 0.86  ],
       [0.81  , 0.085 , 0.86  , 0.31  , 0.01  , 0.11  , 0.01  , 1.01  ,
        0.015 , 0.01  , 0.01  , 0.26  , 0.085 , 0.21  , 0.16  , 0.06  ,
        0.035 , 0.16  ],
       [0.01  , 0.01  , 0.56  , 0.085 , 0.01  , 0.26  , 0.01  , 0.035 ,
        1.01  , 0.01  , 0.01  , 0.11  , 0.11  , 1.01  , 1.01  , 0.01  ,
        0.46  , 0.46  ],
       [0.01  , 0.01  , 0.01  , 0.01  , 0.21  , 0.01  , 0.01  , 0.01  ,
        0.91  , 1.01  , 0.01  , 0.01  , 0.01  , 0.46  , 0.085 , 0.01  ,
        0.01  , 0.01  ],
       [0.21  , 0.26  , 0.31  , 0.11  , 0.16  , 0.06  , 0.06  , 0.06  ,
        0.085 , 0.01  , 0.085 , 0.16  , 0.035 , 0.26  , 0.16  , 0.03  ,
        0.26  , 0.16  ],
       [0.36  , 0.085 , 0.41  , 0.21  , 0.91  , 0.41  , 0.01  , 0.06  ,
        0.985 , 1.01  , 0.015 , 0.085 , 0.015 , 0.26  , 0.21  , 0.03  ,
        0.035 , 0.085 ],
       [0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  ,
        0.06  , 0.085 , 0.0125, 0.16  , 1.01  , 0.035 , 0.01  , 0.01  ,
        0.01  , 0.035 ],
       [0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 1.01  , 0.01  , 0.06  ,
        0.06  , 0.06  , 0.02  , 0.06  , 0.015 , 0.01  , 0.01  , 0.01  ,
        0.06  , 0.035 ],
       [0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  ,
        0.06  , 0.01  , 1.01  , 0.01  , 0.01  , 0.01  , 0.01  , 0.01  ,
        0.085 , 0.01  ]])

negative = np.array([[0.87857459, 0.95196357, 0.89858977, 0.98865807, 0.93862012,
        0.98865807, 0.97865048, 0.9853222 , 0.97197875, 0.9853222 ,
        0.97865048, 0.98865807, 0.87190286, 0.87190286, 0.86523114,
        0.9586353 , 0.99866565, 0.87190286],
       [0.9873065 , 0.94367259, 0.97937306, 0.92383899, 0.95636609,
        0.92383899, 0.92780571, 0.92383899, 0.93177243, 0.93177243,
        0.92383899, 0.92185563, 0.99325658, 0.99325658, 0.99523994,
        0.93573915, 0.91987227, 0.99325658],
       [0.89692385, 0.92913514, 0.89692385, 0.9130295 , 0.8915553 ,
        0.8915553 , 0.99892629, 0.99892629, 0.99892629, 0.8915553 ,
        0.99892629, 0.8915553 , 0.8915553 , 0.8915553 , 0.8915553 ,
        0.99892629, 0.91839805, 0.8915553 ],
       [0.99605817, 0.99605817, 0.99605817, 0.99605817, 0.99605817,
        0.99605817, 0.60187479, 0.60187479, 0.60187479, 0.99605817,
        0.60187479, 0.99605817, 0.99605817, 0.99605817, 0.99605817,
        0.60187479, 0.99605817, 0.99605817],
       [0.99751173, 0.86065668, 0.96018762, 0.92286352, 0.97884968,
        0.99751173, 0.99751173, 0.99751173, 0.99751173, 0.99751173,
        0.99751173, 0.97262899, 0.99751173, 0.99129104, 0.96018762,
        0.99129104, 0.94774626, 0.97884968],
       [0.45222286, 0.99457646, 0.99457646, 0.99457646, 0.95389994,
        0.99457646, 0.99457646, 0.99457646, 0.99457646, 0.99457646,
        0.99457646, 0.9403411 , 0.99457646, 0.99457646, 0.99457646,
        0.96745878, 0.96745878, 0.99457646],
       [0.99814557, 0.81270229, 0.82197445, 0.84979094, 0.98423732,
        0.81270229, 0.98423732, 0.99350949, 0.99814557, 0.99350949,
        0.9888734 , 0.89615176, 0.97032908, 0.82197445, 0.83124662,
        0.9888734 , 0.97960124, 0.84051878],
       [0.80012802, 0.97902578, 0.78779024, 0.92350579, 0.99753244,
        0.97285689, 0.99753244, 0.75077691, 0.99629867, 0.99753244,
        0.99753244, 0.93584356, 0.97902578, 0.94818134, 0.96051912,
        0.98519467, 0.99136356, 0.96051912],
       [0.99735741, 0.99735741, 0.85201489, 0.97753797, 0.99735741,
        0.93129263, 0.99735741, 0.99075093, 0.73309828, 0.99735741,
        0.99735741, 0.9709315 , 0.9709315 , 0.73309828, 0.73309828,
        0.99735741, 0.8784408 , 0.8784408 ],
       [0.99550469, 0.99550469, 0.99550469, 0.99550469, 0.90559843,
        0.99550469, 0.99550469, 0.99550469, 0.59092652, 0.54597339,
        0.99550469, 0.99550469, 0.99550469, 0.7932156 , 0.96178984,
        0.99550469, 0.99550469, 0.99550469],
       [0.98359024, 0.97968316, 0.97577607, 0.99140441, 0.98749733,
        0.9953115 , 0.9953115 , 0.9953115 , 0.99335796, 0.99921858,
        0.99335796, 0.98749733, 0.99726504, 0.97968316, 0.98749733,
        0.99765575, 0.97968316, 0.98749733],
       [0.92638053, 0.98261763, 0.9161556 , 0.95705531, 0.81390634,
        0.9161556 , 0.99795501, 0.98773009, 0.79856895, 0.79345649,
        0.99693252, 0.98261763, 0.99693252, 0.94683038, 0.95705531,
        0.99386504, 0.99284255, 0.98261763],
       [0.99476612, 0.99476612, 0.99476612, 0.99476612, 0.99476612,
        0.99476612, 0.99476612, 0.99476612, 0.96859672, 0.95551202,
        0.99345765, 0.91625791, 0.47137808, 0.98168142, 0.99476612,
        0.99476612, 0.99476612, 0.98168142],
       [0.99488075, 0.99488075, 0.99488075, 0.99488075, 0.99488075,
        0.48295571, 0.99488075, 0.9692845 , 0.9692845 , 0.9692845 ,
        0.9897615 , 0.9692845 , 0.99232112, 0.99488075, 0.99488075,
        0.99488075, 0.9692845 , 0.98208262],
       [0.9937298 , 0.9937298 , 0.9937298 , 0.9937298 , 0.9937298 ,
        0.9937298 , 0.9937298 , 0.9937298 , 0.96237883, 0.9937298 ,
        0.36671025, 0.9937298 , 0.9937298 , 0.9937298 , 0.9937298 ,
        0.9937298 , 0.94670334, 0.9937298 ]])


def pinear_calculator(user_input, positive, negative, all_features, labels,prevalence):
  postive_list = [1 if item in user_input else 0 for item in all_features]
  postive_array = np.array(postive_list).reshape(15,1)  #change the number g=here
  neg_array = 1- postive_array
  
  pos_multi = np.multiply(positive,postive_array)
  neg_multi = np.multiply(negative,neg_array)
  
  total_sum = pos_multi + neg_multi
  
  row_wise_sum = np.prod(total_sum, axis=0)
  
  pre_normalize = np.multiply(row_wise_sum, prevalence)
  pre_normalize= row_wise_sum
  normalized = pre_normalize/pre_normalize.sum()
  
  list1, list2 = (list(t) for t in zip(*sorted(zip(normalized, labels))))
  
  result = {}
  for i in range(5):
    result[str(list2[::-1][i])] = round(list1[::-1][i],5)
  
  return result